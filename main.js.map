{"version":3,"file":"main.js","mappings":"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","sources":["webpack://card-games/./src/modules/deck.ts","webpack://card-games/./src/modules/game-deck.ts","webpack://card-games/./src/modules/start-page-component.ts","webpack://card-games/./src/modules/game-page-component.ts","webpack://card-games/./src/routes.ts","webpack://card-games/./src/script.ts"],"sourcesContent":["function GameDeck({ deck }: { deck: string[] }) {\n    let cardsDeck = deck.sort(() => Math.random() - 0.5).slice(-9);\n    return cardsDeck;\n}\n\n// module.exports = { GameDeck };\n\nexport default GameDeck;\n","export const deck = [\n    '6spades',\n    '7spades',\n    '8spades',\n    '9spades',\n    '10spades',\n    'Jspades',\n    'Qspades',\n    'Kspades',\n    'Aspades',\n    '6clubs',\n    '7clubs',\n    '8clubs',\n    '9clubs',\n    '10clubs',\n    'Jclubs',\n    'Qclubs',\n    'Kclubs',\n    'Aclubs',\n    '6hearts',\n    '7hearts',\n    '8hearts',\n    '9hearts',\n    '10hearts',\n    'Jhearts',\n    'Qhearts',\n    'Khearts',\n    'Ahearts',\n    '6diamonds',\n    '7diamonds',\n    '8diamonds',\n    '9diamonds',\n    '10diamonds',\n    'Jdiamonds',\n    'Qdiamonds',\n    'Kdiamonds',\n    'Adiamonds',\n];\n","import { renderGamePageComponent as renderGamePageComponent } from './game-page-component';\nexport let n: number;\n\nexport function renderStartPageComponent({ appEl }: { appEl: HTMLElement }) {\n    const startWindowHtml = `\n        <div class=\"window center\">\n            <div class=\"window__title\">Выбери сложность</div>\n            <div class=\"window__level\">\n                <div class=\"window__level-button\">\n                    <input id=\"radio-1\" type=\"radio\" name=\"radio\" value=\"1\" checked>\n                    <label for=\"radio-1\">1</label>\n                </div>\n                <div class=\"window__level-button\">\n                    <input id=\"radio-2\" type=\"radio\" name=\"radio\" value=\"2\">\n                    <label for=\"radio-2\">2</label>\n                </div>\n                <div class=\"window__level-button\">\n                    <input id=\"radio-3\" type=\"radio\" name=\"radio\" value=\"3\">\n                    <label for=\"radio-3\">3</label>\n                </div>\n            </div>\n            <div>\n                <button id=\"game__button\" class=\"game__button\">Старт</button>\n            </div>\n        </div>`;\n\n    appEl.innerHTML = startWindowHtml;\n\n    // Выбираем сложность уровня\n\n    function levelSelection() {\n        const buttonElement = document.getElementById(\n            'game__button'\n        ) as HTMLElement;\n\n        buttonElement!.addEventListener('click', () => {\n            function levels() {\n                let level = document.getElementsByName('radio');\n                for (var i = 0; i < level.length; i++) {\n                    if ((level[i] as HTMLInputElement).checked) {\n                        console.log('Выбран ' + Number(i + 1) + ' уровень');\n                        if (i === 0) {\n                            n = 3;\n                            renderGamePageComponent({ appEl });\n                        } else if (i === 1) {\n                            n = 6;\n                            renderGamePageComponent({ appEl });\n                        } else if (i === 2) {\n                            n = 9;\n                            renderGamePageComponent({ appEl });\n                        }\n                    }\n                }\n            }\n\n            levels();\n        });\n    }\n\n    levelSelection();\n}\n","import GameDeck from './deck';\nimport { deck } from './game-deck';\nimport { n, renderStartPageComponent } from './start-page-component';\n\nexport function renderGamePageComponent({ appEl }: { appEl: HTMLElement }) {\n    let gameCards = GameDeck({ deck })\n        .sort(() => Math.random() - 0.5)\n        .slice(-n)\n        .join(' ')\n        .concat(' ')\n        .repeat(2)\n        .slice(0, -1)\n        .split(' ')\n        .sort(() => Math.random() - 0.5);\n    console.log(gameCards);\n\n    let isCurrentWindow = false;\n    let winnerUser = false;\n\n    // окно с открытыми рубашками\n    function startGame() {\n        const cardHTML = gameCards\n            .map((card, index) => {\n                return `\n                    <img class=\"game__card_start\" data-index=${index} src=\"./img/${card}.svg\" alt=\"рубашка\" />\n                    `;\n            })\n            .join('');\n\n        const windowHtml = `\n                <div class=\"game-header\">\n                    <div class=\"game-header__timer\">\n                        <div class=\"game-header__timer_header\">\n                            <p class=\"game-header__timer_header-item\">min</p>\n                            <p class=\"game-header__timer_header-item\">sec</p>\n                        </div>\n                        <div class=\"game-header__timer_time\" id=\"countdown\">00:00</div>\n                    </div>\n                    <div class=\"game-header__restart\">\n                        <button class=\"restart__button\">Начать заново</button>\n                    </div>\n                </div>\n                <div class=\"game__field\">\n                    ${cardHTML}\n                </div>\n                `;\n\n        appEl.innerHTML = windowHtml;\n\n        const restartGame = () => {\n            const buttonRestartGame =\n                document.querySelector('.restart__button');\n            buttonRestartGame!.addEventListener('click', () => {\n                return renderStartPageComponent({ appEl });\n            });\n        };\n\n        restartGame();\n    }\n\n    // окно с закрытыми рубашками через 5 секунд\n    function startGamePage() {\n        const cardHTML = gameCards\n            .map((card, index) => {\n                return `\n                <div class=\"memory-card\" data-framework=\"${card}\">\n                    <img class=\"front-face\" src=\"./img/${card}.svg\" alt=\"React\" />\n                    <img class=\"back-face\" data-index=${index} src=\"./img/shirt.svg\" alt=\"Рубашка\" />\n                </div>`;\n            })\n            .join('');\n\n        const windowHtml = `\n            <div class=\"game-header\">\n                <div class=\"game-header__timer\">\n                    <div class=\"game-header__timer_header\">\n                        <p class=\"game-header__timer_header-item\">min</p>\n                        <p class=\"game-header__timer_header-item\">sec</p>\n                    </div>\n                    <div class=\"game-header__timer_time\" id=\"countdown\">00:00</div>\n                </div>\n                <div class=\"game-header__restart\">\n                    <button class=\"restart__button\">Начать заново</button>\n                </div>\n            </div>\n            <div class=\"game__field\">\n                ${cardHTML}\n            </div>\n            `;\n\n        appEl.innerHTML = windowHtml;\n\n        const cards = document.querySelectorAll('.memory-card');\n\n        // сравнение карт\n        let hasFlippedCard = false;\n        let lockBoard = false;\n        let firstCard: HTMLElement | null = null;\n        let secondCard: HTMLElement | null = null;\n\n        function flipCard(this: HTMLElement | null) {\n            if (lockBoard) return;\n            if (this === firstCard) return;\n\n            this!.classList.add('flip');\n\n            if (!hasFlippedCard) {\n                hasFlippedCard = true;\n                firstCard = this;\n                return;\n            }\n\n            secondCard = this;\n\n            checkForMatch();\n        }\n\n        function checkForMatch() {\n            if (\n                firstCard!.dataset.framework === secondCard!.dataset.framework\n            ) {\n                disableCards();\n                if (\n                    Array.from(document.querySelectorAll('.flip')).length ===\n                    gameCards.length\n                ) {\n                    setTimeout(() => {\n                        winnerUser = true;\n                        isCurrentWindow = !isCurrentWindow;\n                        modalOverlay();\n                        resetBoard();\n                    }, 500);\n                }\n\n                return;\n            }\n\n            lossingTheGame();\n        }\n\n        function disableCards() {\n            firstCard!.removeEventListener('click', flipCard);\n            secondCard!.removeEventListener('click', flipCard);\n\n            resetBoard();\n        }\n\n        function lossingTheGame() {\n            lockBoard = true;\n\n            setTimeout(() => {\n                firstCard!.classList.remove('flip');\n                secondCard!.classList.remove('flip');\n                isCurrentWindow = true;\n                winnerUser = false;\n                modalOverlay();\n                resetBoard();\n            }, 500);\n        }\n\n        function resetBoard() {\n            [hasFlippedCard, lockBoard] = [false, false];\n            [firstCard, secondCard] = [null, null];\n        }\n\n        cards.forEach((card) => card.addEventListener('click', flipCard));\n\n        // таймер игры\n        let time = 0;\n        const countDownElement = document.getElementById(\n            'countdown'\n        ) as HTMLElement;\n        setInterval(updateCountdown, 1000);\n        function updateCountdown() {\n            let minutes: string | number = Math.floor(time / 60);\n            let seconds: string | number = time % 60;\n            minutes = minutes < 10 ? '0' + minutes : minutes;\n            seconds = seconds < 10 ? '0' + seconds : seconds;\n            countDownElement.innerHTML = `${minutes}:${seconds}`;\n            time++;\n        }\n\n        function modalOverlay() {\n            const timerResult = countDownElement.textContent;\n\n            const cardHTML = gameCards\n                .map((card, index) => {\n                    return `\n                    <img class=\"game__card_start\" data-index=${index} src=\"./img/${card}.svg\" alt=\"рубашка\" />\n                    `;\n                })\n                .join('');\n\n            const windowHtml = `\n                <div class=\"game-header\">\n                    <div class=\"game-header__timer\">\n                        <div class=\"game-header__timer_header\">\n                            <p class=\"game-header__timer_header-item\">min</p>\n                            <p class=\"game-header__timer_header-item\">sec</p>\n                        </div>\n                        <div class=\"game-header__timer_time\" id=\"countdown\">00:00</div>\n                    </div>\n                    <div class=\"game-header__restart\">\n                        <button class=\"restart__button\">Начать заново</button>\n                    </div>\n                </div>\n                <div class=\"game__field\">\n                    ${cardHTML}\n                </div>\n                ${\n                    isCurrentWindow\n                        ? `\n                <!-- модальное окно, которое появится после сбора всех пар -->\n                <div id=\"modal-overlay\" class=\"modal-overlay\"></div>\n                \n                <div class=\"the-end\">\n                    <img class=\"icon-game\" src=\"${\n                        winnerUser ? './img/victory.svg' : './img/lossing.svg'\n                    }\" alt=\"lossing\" />\n                    <div class=\"window__message\">Вы ${\n                        winnerUser ? 'победили' : 'проиграли'\n                    }!</div>\n                    <p class=\"window__timer\">Затраченное время</p>\n                    <div class=\"window__time\">${timerResult}</div>\n                    <div class=\"game-header__restart\">\n                        <button class=\"game__button end\">Начать заново</button>\n                    </div>\n                </div>\n                `\n                        : ``\n                }`;\n\n            appEl.innerHTML = windowHtml;\n\n            if (isCurrentWindow) {\n                const restartGame = () => {\n                    const buttonRestartGame =\n                        document.querySelector('.game__button');\n                    buttonRestartGame!.addEventListener('click', () => {\n                        return renderStartPageComponent({ appEl });\n                    });\n                };\n                restartGame();\n            } else {\n                const restartGame = () => {\n                    const buttonRestartGame =\n                        document.querySelector('.restart__button');\n                    buttonRestartGame!.addEventListener('click', () => {\n                        return renderStartPageComponent({ appEl });\n                    });\n                };\n                restartGame();\n            }\n        }\n\n        restartGame();\n    }\n\n    startGame();\n    setTimeout(startGamePage, 5000);\n\n    const restartGame = () => {\n        const buttonRestartGame = document.querySelector('.restart__button');\n        buttonRestartGame!.addEventListener('click', () => {\n            return renderStartPageComponent({ appEl });\n        });\n    };\n}\n","// Файл со списком страниц приложения\nexport const GAME_PAGE = 'game';\nexport const START_PAGE = 'start';\nimport \"/src/styles.css\";\n","import { renderGamePageComponent } from './modules/game-page-component';\nimport { renderStartPageComponent } from './modules/start-page-component';\nimport {\n    START_PAGE, //начальная страница\n    GAME_PAGE, //игра\n} from './routes';\n\nexport let page: string;\n\n/**\n * Включает страницу приложения\n * с нее начинается работа приложения\n */\nexport const goToPage = (newPage: string) => {\n    if ([START_PAGE, GAME_PAGE].includes(newPage)) {\n        if (newPage === START_PAGE) {\n            renderApp();\n        }\n\n        page = newPage;\n        renderApp();\n\n        return;\n    }\n\n    throw new Error('страницы не существует');\n};\n\n// отрисовывает посты\nconst renderApp = () => {\n    const appEl = document.getElementById('app') as HTMLElement;\n\n    if (page === START_PAGE) {\n        return renderStartPageComponent({\n            appEl,\n        });\n    }\n\n    if (page === GAME_PAGE) {\n        return renderGamePageComponent({\n            appEl,\n        });\n    }\n};\n\n// вызов-функция\ngoToPage(START_PAGE);\n\nconsole.log('It works!');\n"],"names":["sort","Math","random","slice","n","renderStartPageComponent","appEl","innerHTML","document","getElementById","addEventListener","level","getElementsByName","i","length","checked","console","log","Number","renderGamePageComponent","levels","gameCards","deck","join","concat","repeat","split","cardHTML","windowHtml","isCurrentWindow","winnerUser","map","card","index","querySelector","setTimeout","cards","querySelectorAll","hasFlippedCard","lockBoard","firstCard","secondCard","flipCard","this","classList","add","dataset","framework","removeEventListener","resetBoard","Array","from","modalOverlay","remove","checkForMatch","forEach","time","countDownElement","timerResult","textContent","setInterval","minutes","floor","seconds","restartGame","page","GAME_PAGE","START_PAGE","renderApp","newPage","includes","Error","goToPage"],"sourceRoot":""}